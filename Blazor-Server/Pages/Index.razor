@page "/"
@inject HttpClient HttpClient
<PageTitle>AI Chat Bot</PageTitle>
@using Blazor_Server.Data

@if (VisibleFAB)
{
    <SfFab @ref="FabObject" Target="#container" IconCss="demo-icons chat-icon" OnClick="EventClick" CssClass="custom-fab"></SfFab>
}
<div id="container" >
    
    <div id="sample" style="visibility:@ContainerVisibility">
        <div style="color:white; Background:deepskyblue; width:100%; height:50px; padding:10px; font-size:23px">
            AI Chat Bot
        </div>
        <div>
        <SfSpinner @bind-Visible="@VisibleProperty">
        </SfSpinner>
        </div>
        <form method="post" @onsubmit="OnSend" >
        <SfListView ID="list" class="flex flex__direction"
                    DataSource="@DataSource" Height="89vh" >
            <ListViewFieldSettings TValue="ListDataModel" Id="Id" Text="Text"></ListViewFieldSettings>
            <ListViewTemplates TValue="ListDataModel">
                <Template>
                    @{
                        ListDataModel currentData = context as ListDataModel;

                        <div class="flex item__container">
                            <div class="flex flex__1 vertical__center flex__center @(currentData.Chat == "sender" ? "flex__order__2" : "")">
                                @if (currentData.Avatar != "")
                                {
                                    <span class="e-avatar e-avatar-circle">@currentData.Avatar</span>
                                }
                                else
                                {
                                    <span class="@currentData.Pic e-avatar e-avatar-circle"></span>
                                }
                            </div>
                           
                            <div class="flex content__container flex__8 vertical padding @(currentData.Chat == "sender" ? "right__align" : "left__align")">
                                <div class="bold">@currentData.Text</div>
                                <div class="small__font">@((MarkupString)@currentData.Contact)</div>
                            </div>
                        </div>
                    }
                </Template>
            </ListViewTemplates>
        </SfListView>
        <div class="flex">
            <div class="flex__8 padding">
                <SfTextBox Placeholder="Type your message"
                               @ref="@ChatTextBox"
                               @oninput="@(e=>OnTyping(e))"></SfTextBox>
            </div>
            <div class="flex">
                <button class="e-btn" ></button>     
            </div>
            <div>
                    <SfToast @ref="ToastObj" ID="toast_type">
        <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
            </div>
        </div>
        </form>
    </div>
</div>

@code
{
    SfToast ToastObj;
    SfFab FabObject;

    private string ToastPosition = "Right";

    private ChatGPTEngine gptEngine= new ChatGPTEngine();

    private AssistantFileSearch assistantFileSearch = new AssistantFileSearch();

    public string reply = "";
    ObservableCollection<ListDataModel> DataSource = new ObservableCollection<ListDataModel>();

    public string checkCompletions = "";

    private string? fileContent = "";


    public async Task EventClick()
    {
        this.VisibleFAB = false;
        StateHasChanged();
        this.ContainerVisibility = "visible";
        #region Perform a simple user query request

        reply = await gptEngine.ProcessTheUserInput("You are an AI chatbot and you are here to answer my question");

        #endregion


        #region Add a filecontent to chat completions for context

        // fileContent = await HttpClient.GetStringAsync("https://localhost:7200/files/SyncBlazor.txt");
        // gptEngine.myMessage.Add(new Message { role = "user", content = fileContent });
        // gptEngine.myMessage.Add(new Message { role = "user", content = "Remember my name as Michael" });
        // reply = await gptEngine.ProcessTheGivenInfoWithContext(result, "You are an AI chatbot and you are here to answer my question");



        #endregion


        #region Perform file search with help of an assistant.

        // await assistantFileSearch.Search(this.ToastObj);
        // reply = await assistantFileSearch.GetMessages(this.ToastObj);

        #endregion

        await Task.Delay(3500);

        this.VisibleProperty = false;


        DataSource.Add(new ListDataModel
            {
                Text = "AI Bot",
                Contact = reply,
                Id = "1",
                Avatar = "",
                Pic = "pic01",
                Chat = "sender"
            });

    }


    protected override async Task OnInitializedAsync()
    {
        this.VisibleProperty = true;       

    }

    public string result="";

    private async Task<string> GetResult(string query)
    {


        #region Request simple user query

        result = await gptEngine.ProcessTheUserInput(query);

        #endregion

        #region Request user query with context using chat completions

        // result = await gptEngine.ProcessTheGivenInfoWithContext(result, query);

        #endregion

        #region Request user query to an AI Assistant via a dedicated user thread.

        // await assistantFileSearch.AskQuestionToAssistant(query, this.ToastObj);
        // result = await assistantFileSearch.GetMessages(this.ToastObj);

        #endregion

        return result;


    }


    SfTextBox ChatTextBox;
    string textBoxValue = "";

    async Task OnSend()
    {

        if (ChatTextBox.Value != null)
        {
            textBoxValue = ChatTextBox.Value;
            ChatTextBox.Value = "";
            DataSource.Add(new ListDataModel
                {
                    Text = "Mike",
                    Contact = textBoxValue,
                    Id = new Random().Next(300, 900).ToString(),
                    Avatar = "",
                    Pic = "pic02",
                    Chat = "receiver"
                });
            this.VisibleProperty = true;
            result = await GetResult(textBoxValue);

            this.VisibleProperty = false;

            DataSource.Add(new ListDataModel
                {

                    Text = "AI Bot",
                    Contact = result,
                    Id = "1",
                    Avatar = "",
                    Pic = "pic01",
                    Chat = "sender"
                });
        }
        else
        {
            DataSource.Add(new ListDataModel
                {
                    Text = "Mike",
                    Contact = textBoxValue,
                    Id = new Random().Next(300, 900).ToString(),
                    Avatar = "",
                    Pic = "pic02",
                    Chat = "receiver"
                });
            DataSource.Add(new ListDataModel
                {

                    Text = "AI Bot",
                    Contact = "Please enter a valid query",
                    Id = "1",
                    Avatar = "",
                    Pic = "pic01",
                    Chat = "sender"
                });
        }

    }

    async Task OnTyping(ChangeEventArgs args)
    {
        if (args.Value != "")
        {
            textBoxValue = args.Value.ToString();
        }
    }



    public class ListDataModel
    {
        public string Id
        {
            get;
            set;
        }
        public string Chat
        {
            get;
            set;
        }
        public string Pic
        {
            get;
            set;
        }
        public string Avatar
        {
            get;
            set;
        }
        public string Text
        {
            get;
            set;
        }
        public string Contact
        {
            get;
            set;
        }
    }
    private bool VisibleProperty { get; set; } = false;

    private bool VisibleFAB { get; set; } = true;

    private string ContainerVisibility { get; set; } = "hidden";
}

<style>
    #list {
        box-shadow: 0 1px 4px #ddd;
        border-bottom: 1px solid #ddd;
    }

    #list {
        margin: 0 auto;
        border: 1px solid #ccc;
    }


        #list .e-list-item {
            height: auto;
            cursor: pointer;
            line-height: 22px;
            padding: 8px;
        }

        #list.e-listview{
            overflow-y:scroll;
            position:sticky;
            scrollbar-width:none;
        }

        #list.e-listview .e-list-container {
            overflow:unset;
            position:unset;
        }

        #list.e-listview .e-list-header {
            background-color: #0278d7;
            color: white;
        }

        #list .e-list-item.e-active {
            background-color: transparent;
        }

        #list .e-list-item.e-hover {
            background-color: transparent;
        }

    .padding {
        padding: 4px;
    }

    .right__align {
        text-align: right;
        margin-right: 8px;
        padding-right: 8px;
    }

    .left__align {
        margin-left: 8px;
        padding-left: 8px;
    }

    .content__container {
        background-color: aliceblue;
    }

    .e-btn{
        background-image: url("../send.png");
        background-repeat: no-repeat;
        background-color :white;
        height: 30px;
        width:50px;
        background-size: 100%;
        margin: 5px;
        
    }
    .e-btn:hover{
           
            background-image: url("../send.png");
            background-repeat: no-repeat;
            background-size: 100%;
    }

    .e-btn:focus{
            background-image: url("../send.png");
            background-repeat: no-repeat;
            background-color: white;
            height: 30px;
            width: 50px;
            background-size: 100%;
            margin: 5px;
    }

    .flex {
        display: flex;
    }

    .flex__direction{
        flex-direction: column-reverse;
        flex-grow: 1;
    }

    .flex__center {
        justify-content: center;
    }

    .vertical__center {
        align-items: center;
    }

    .vertical {
        flex-direction: column;
    }

    .flex__order__1 {
        order: 1;
    }

    .flex__order__2 {
        order: 2;
    }

    .flex__1 {
        flex: 1;
    }

    .flex__2 {
        flex: 2;
    }

    .flex__3 {
        flex: 3;
    }

    .flex__5 {
        flex: 5;
    }

    .flex__8 {
        flex: 8;
    }

    .bold {
        font-weight: bold;
        color:green;
    }

    .margin {
        margin: 10px;
    }

    .small__font {
        font-size: 13px;
        margin: 2px 0;
    }

    .pic01 {
        background-image: url("../cody.png");
    }

    .pic02 {
        background-image: url("../mike.jpg");
    }

    .pic03 {
        background-image: url("https://ej2.syncfusion.com/demos/src/grid/images/5.png");
    }

    .pic04 {
        background-image: url("https://ej2.syncfusion.com/demos/src/grid/images/2.png");
    }

    @@font-face {
        font-family: 'Toast_icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    #toast_types button {
        margin: 5px;
        min-width: 160px;
        max-width: 160px;
    }

    .toast-icons {
        font-family: 'Toast_icons' !important;
        speak: none;
        font-size: 55px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    #toast_type .e-toast-icon.e-icons {
        height: auto;
        font-size: 30px;
    }

    .bootstrap5 #toast_type .e-toast-icon.e-icons,
    .bootstrap5-dark #toast_type .e-toast-icon.e-icons {
        height: 25px;
    }

    .toast-icons.e-success::before {
        content: "\e701";
    }

    .toast-icons.e-error::before {
        content: "\e700";
    }

    .toast-icons.e-info::before {
        content: "\e704";
    }

    .toast-icons.e-warning::before {
        content: "\e703";
    }

    #toast_types {
        text-align: center;
    }

    @@font-face {
font-family: 'demo-icons';
src:
url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
font-weight: normal;
font-style: normal;
}

[class^="demo-icons"], [class*=" demo-icons"] {
 font-family: 'demo-icons' !important;
speak: none;
font-size: 55px;
font-style: normal;
font-weight: normal;
font-variant: normal;
text-transform: none;
line-height: 1;
-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;
}

.chat-icon:before { content: "\e700"; }

    custom-fab.e-fab.e-btn .e-btn-icon {
        font-size: 30px;
    }

</style>